
https://www.w3cschool.cn/c/c-data-types.html
C 语言标识符
    C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。
    C 标识符内不允许出现标点字符，比如 @、$ 和 %。C 是区分大小写的编程语言。因此，在 C 中，Manpower 和 manpower 是两个不同的标识符。下面列出几个有效的标识符：
****************************************
C语言关键字
auto	 声明自动变量
else	 条件语句否定分支（与 if 连用
long	 声明长整型变量或函数返回值类型
switch   用于开关语句
break	 跳出当前循环
enum	 声明枚举类型
register 声明寄存器变量
typedef  用以给数据类型取别名
case	 开关语句分支
extern	 声明变量或函数是在其它文件或本文件的其他位置定义
return	 子程序返回语句（可以带参数，也可不带参数）
union    声明共用体类型
char     声明字符型变量或函数返回值类型
float	 声明浮点型变量或函数返回值类型
short	 声明短整型变量或函数
unsigned 声明无符号类型变量或函数
const    声明只读变量
for	     一种循环语句
signed	 声明有符号类型变量或函数
void     声明函数无返回值或无参数，声明无类型指针
continue 结束当前循环，开始下一轮循环
goto     无条件跳转语句
sizeof	 计算数据类型或变量长度（即所占字节数）
volatile 说明变量在程序执行中可被隐含地改变
default  开关语句中的"其它"分支
if	     条件语句
static	 声明静态变量
while    循环语句的循环条件
do	     循环语句的循环体
int	     声明整型变量或函数
struct	 声明结构体类型
double   声明双精度浮点型变量或函数返回值类型
__packed 可以使编译器不再填充字节
***************************************
C 语言数据类型
在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。
C 中的类型可分为以下几种：
序号	类型与描述
1	基本类型：
它们是算术类型，包括两种类型：整数类型和浮点类型。
2	枚举类型：
它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。
3	void 类型：
类型说明符 void 表明没有可用的值。
4	派生类型：
它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。
*****************************************
C 语言标准整数型存储大小
下表列出了关于标准整数类型的存储大小和值范围的细节：
类型	存储大小	值范围
char	        1 字节	     -128 到 127 或 0 到 255
unsigned char	1 字节	     0 到 255
signed char 	1 字节    	 -128 到 127
int	            2 或 4 字节	 -32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647
unsigned int	2 或 4 字节	 0 到 65,535 或 0 到 4,294,967,295
short	        2 字节	     -32,768 到 32,767
unsigned short	2 字节	     0 到 65,535
long	        4 字节        -2,147,483,648 到 2,147,483,647
unsigned long	4 字节	     0 到 4,294,967,295

浮点类型
下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：
类型	存储大小	值范围	精度
float	        4 字节	    1.2E-38 到 3.4E+38	    6 位小数
double	        8 字节	    2.3E-308 到 1.7E+308	    15 位小数
long double	    16 字节	    3.4E-4932 到 1.1E+4932	19 位小数

void 类型
void 类型指定没有可用的值。它通常用于以下三种情况下：
序号	类型与描述
1	函数返回为空
C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 void exit (int status);
2	函数参数为空
C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 int rand(void);
3	指针指向 void
类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 void *malloc( size_t size ); 返回指向 void 的指针，可以转换为任何数据类型。
********************************************************
C 变量

变量其实只不过是程序可操作的存储区的名称。C 中每个变量都有特定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。
变量的名称可以由字母、数字和下划线字符组成。它必须以字母或下划线开头。大写字母和小写字母是不同的，因为 C 是大小写敏感的。基于前一章讲解的基本类型，有以下几种基本的变量类型：
类型	描述
char	通常是一个八位字节（一个字节）。这是一个整数类型。
int	对机器而言，整数的最自然的大小。
float	单精度浮点值。
double	双精度浮点值。
void	表示类型的缺失
*********************************************************

算术运算符
+	把两个操作数相加	A + B 将得到 30
-	从第一个操作数中减去第二个操作数	A - B 将得到 -10
*	把两个操作数相乘	A * B 将得到 200
/	分子除以分母	B / A 将得到 2
%	取模运算符，整除后的余数	B % A 将得到 0
++	自增运算符，整数值增加 1	A++ 将得到 11
--	自减运算符，整数值减少 1	A-- 将得到 9

关系运算符
==	检查两个操作数的值是否相等，如果相等则条件为真。	(A == B) 不为真。
!=	检查两个操作数的值是否相等，如果不相等则条件为真。	(A != B) 为真。
>	检查左操作数的值是否大于右操作数的值，如果是则条件为真。	(A > B) 不为真。
<	检查左操作数的值是否小于右操作数的值，如果是则条件为真。	(A < B) 为真。
>=	检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。	(A >= B) 不为真。
<=	检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。	(A <= B) 为真。

逻辑运算符
&&	称为逻辑与运算符。如果两个操作数都非零，则条件为真。	(A && B) 为假。
||	称为逻辑或运算符。如果两个操作数中有任意一个非零，则条件为真。	(A || B) 为真。
!	称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。	!(A && B) 为真。

位运算符
位运算符作用于位，并逐位执行操作。&、 | 和 ^ 的真值表如下所示：

取反运算符，按二进制位进行“取反”运算。运算规则：
~1=0;
~0=1;

<<	二进制左移运算符。左操作数的值向左移动右操作数指定的位数（左边的二进制位丢弃，右边补0）。	A << 2 将得到 240，即为 1111 0000
>>	二进制右移运算符。左操作数的值向右移动右操作数指定的位数（正数左补0，负数左补1，右边丢弃）。

赋值运算符
=	简单的赋值运算符，把右边操作数的值赋给左边操作数	C = A + B 将把 A + B 的值赋给 C
+=	加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数	C += A 相当于 C = C + A
-=	减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数	C -= A 相当于 C = C - A
*=	乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数	C *= A 相当于 C = C * A
/=	除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数	C /= A 相当于 C = C / A
%=	求模且赋值运算符，求两个操作数的模赋值给左边操作数	C %= A 相当于 C = C % A
<<=	左移且赋值运算符	C <<= 2 等同于 C = C << 2
>>=	右移且赋值运算符	C >>= 2 等同于 C = C >> 2
&=	按位与且赋值运算符	C &= 2 等同于 C = C & 2
^=	按位异或且赋值运算符	C ^= 2 等同于 C = C ^ 2
|=	按位或且赋值运算符	C |= 2 等同于 C = C | 2

杂项运算符
sizeof()	返回变量的大小。	sizeof(a) 将返回 4，其中 a 是整数。
&	返回变量的地址。	&a; 将给出变量的实际地址。
*	指向一个变量。	*a; 将指向一个变量。
? :	条件表达式	如果条件为真 ? 则值为 X : 否则值为 Y

//优先级
从低到高
int 
unsigned int 
long
unsigned long 
long long 
unsigned long long 
float 
double 
long double

c 内存管理
1	void *calloc(int num, int size);
该函数分配一个带有 function allocates an array of num 个元素的数组，每个元素的大小为 size 字节。
2	void free(void *address); 
该函数释放 address 所指向的h内存块。
3	void *malloc(int num); 
该函数分配一个 num 字节的数组，并把它们进行初始化。
4	void *realloc(void *address, int newsize); 
该函数重新分配内存，把内存扩展到 newsize。